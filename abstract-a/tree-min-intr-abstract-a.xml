<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
    <declaration>/*

*/

clock x;
const int NA=8;

int[0,NA] impersonated; // impersonated agent

chan share[NA+1][NA+1];
int[0,3] shqual;</declaration>
	<template>
		<name>Attacker</name>
		<declaration>// int quality;
int[0,NA] snd;
int[0,NA] rcv;
		</declaration>
		<location id="id0" x="0" y="-782">
			<name>id0</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id1" x="0" y="-884">
			<name>id1</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id2" x="119" y="-578">
			<name>id2</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id3" x="59" y="-476">
			<name>id3</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id4" x="178" y="-476">
			<name>id4</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id5" x="0" y="-272">
			<name>id5</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
				<label kind="select">fqual:int[0,2]</label>
				<label kind="synchronisation">share[impersonated][impersonated*2]!</label>
				<label kind="assignment">shqual=fqual</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
				<label kind="guard">impersonated*2+1&gt;NA</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id5"/>
				<label kind="guard">impersonated*2&gt;NA</label>
				<label kind="synchronisation">share[impersonated/2][impersonated]?</label>
				<label kind="assignment">shqual=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
				<label kind="select">fqual:int[0,2]</label>
				<label kind="guard">impersonated*2+1&lt;=NA</label>
				<label kind="synchronisation">share[impersonated][impersonated*2+1]!</label>
				<label kind="assignment">shqual=fqual</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
				<label kind="select">fqual:int[0,2]</label>
				<label kind="synchronisation">share[impersonated][impersonated*2]!</label>
				<label kind="assignment">shqual=fqual</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
				<label kind="select">fqual:int[0,2]</label>
				<label kind="guard">impersonated*2+1&lt;=NA</label>
				<label kind="synchronisation">share[impersonated][impersonated*2+1]!</label>
				<label kind="assignment">shqual=fqual</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
				<label kind="guard">impersonated&gt;1 &amp;&amp; impersonated*2&lt;=NA</label>
				<label kind="synchronisation">share[impersonated/2][impersonated]?</label>
				<label kind="assignment">shqual=0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
				<label kind="guard">impersonated==1 &amp;&amp; NA&gt;1</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
				<label kind="select">i:int[1,NA]</label>
				<label kind="assignment">impersonated=i</label>
		</transition>
	</template>
	<template>
		<name>AI</name>
		<parameter>int[1,NA] id</parameter>
		<declaration>// Place local declarations here.

int[0,3] data;
int completion;
int mstatus;
int[0,3] mqual;
int[0,3] info;
const int __d_at_id6_of_completion[1] = {0};
const int __d_at_id6_of_mstatus[1] = {0};
const int __d_at_id7_of_completion[4] = {0,1,2,3};
const int __d_at_id7_of_mstatus[4] = {0,0,0,0};
const int __d_at_id8_of_completion[1] = {0};
const int __d_at_id8_of_mstatus[1] = {0};
const int __d_at_id9_of_completion[16] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
const int __d_at_id9_of_mstatus[16] = {0,0,0,0,2,2,2,2,1,1,1,1,3,3,3,3};
const int __d_at_id10_of_completion[12] = {0,1,2,3,0,1,2,3,0,1,2,3};
const int __d_at_id10_of_mstatus[12] = {2,2,2,2,1,1,1,1,3,3,3,3};
const int __d_at_id11_of_completion[16] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
const int __d_at_id11_of_mstatus[16] = {0,0,0,0,2,2,2,2,1,1,1,1,3,3,3,3};
const int __d_at_id12_of_completion[16] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
const int __d_at_id12_of_mstatus[16] = {0,0,0,0,2,2,2,2,1,1,1,1,3,3,3,3};
const int __d_at_id13_of_completion[16] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
const int __d_at_id13_of_mstatus[16] = {0,0,0,0,2,2,2,2,1,1,1,1,3,3,3,3};
const int __d_at_id14_of_completion[16] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
const int __d_at_id14_of_mstatus[16] = {0,0,0,0,2,2,2,2,1,1,1,1,3,3,3,3};
const int __d_at_id15_of_completion[16] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
const int __d_at_id15_of_mstatus[16] = {0,0,0,0,2,2,2,2,1,1,1,1,3,3,3,3};
const int __init_completion = 0;
const int __init_mstatus = 0;
void __assume_at_id6_of_completion(int _){
	completion = __d_at_id6_of_completion[_];
}
void __assume_at_id6_of_mstatus(int _){
	mstatus = __d_at_id6_of_mstatus[_];
}
void __assume_at_id7_of_completion(int _){
	completion = __d_at_id7_of_completion[_];
}
void __assume_at_id7_of_mstatus(int _){
	mstatus = __d_at_id7_of_mstatus[_];
}
void __assume_at_id8_of_completion(int _){
	completion = __d_at_id8_of_completion[_];
}
void __assume_at_id8_of_mstatus(int _){
	mstatus = __d_at_id8_of_mstatus[_];
}
void __assume_at_id9_of_completion(int _){
	completion = __d_at_id9_of_completion[_];
}
void __assume_at_id9_of_mstatus(int _){
	mstatus = __d_at_id9_of_mstatus[_];
}
void __assume_at_id10_of_completion(int _){
	completion = __d_at_id10_of_completion[_];
}
void __assume_at_id10_of_mstatus(int _){
	mstatus = __d_at_id10_of_mstatus[_];
}
void __assume_at_id11_of_completion(int _){
	completion = __d_at_id11_of_completion[_];
}
void __assume_at_id11_of_mstatus(int _){
	mstatus = __d_at_id11_of_mstatus[_];
}
void __assume_at_id12_of_completion(int _){
	completion = __d_at_id12_of_completion[_];
}
void __assume_at_id12_of_mstatus(int _){
	mstatus = __d_at_id12_of_mstatus[_];
}
void __assume_at_id13_of_completion(int _){
	completion = __d_at_id13_of_completion[_];
}
void __assume_at_id13_of_mstatus(int _){
	mstatus = __d_at_id13_of_mstatus[_];
}
void __assume_at_id14_of_completion(int _){
	completion = __d_at_id14_of_completion[_];
}
void __assume_at_id14_of_mstatus(int _){
	mstatus = __d_at_id14_of_mstatus[_];
}
void __assume_at_id15_of_completion(int _){
	completion = __d_at_id15_of_completion[_];
}
void __assume_at_id15_of_mstatus(int _){
	mstatus = __d_at_id15_of_mstatus[_];
}
void __reset_completion(){
	completion = __init_completion;
}

void __reset_mstatus(){
	mstatus = __init_mstatus;
}

		</declaration>
		<location id="id6" x="-221" y="-306">
			<name>id6</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id7" x="-340" y="-102">
			<name>id7</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id8" x="-340" y="-306">
			<name>id8</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id9" x="-102" y="-102">
			<name>id9</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id10" x="136" y="-102">
			<name>id10</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id11" x="-102" y="102">
			<name>id11</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id12" x="17" y="306">
			<name>id12</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id13" x="-42" y="408">
			<name>id13</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id14" x="-102" y="612">
			<name>wait</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<location id="id15" x="76" y="408">
			<name>id15</name>
<label kind="invariant">x&lt;=0</label>/
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
				<label kind="guard">id*2+1&lt;=NA</label>
				<label kind="synchronisation">share[id][id*2+1]!</label>
				<label kind="assignment">shqual=mqual</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
				<label kind="synchronisation">share[id][id*2]!</label>
				<label kind="assignment">shqual=mqual</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
				<label kind="guard">id&gt;1 &amp;&amp; id*2&lt;=NA</label>
				<label kind="synchronisation">share[id/2][id]?</label>
				<label kind="assignment">mqual=(mqual&gt;shqual)*shqual+(mqual&lt;=shqual)*mqual,
shqual=0</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
				<label kind="guard">id*2+1&gt;NA</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id15"/>
				<label kind="guard">id*2+1&lt;=NA</label>
				<label kind="synchronisation">share[id][id*2+1]!</label>
				<label kind="assignment">shqual=mqual</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
				<label kind="synchronisation">share[id][id*2]!</label>
				<label kind="assignment">shqual=mqual</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
				<label kind="guard">id==1&amp;&amp;id*2&lt;=NA</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
				<label kind="guard">id*2&gt;NA</label>
				<label kind="synchronisation">share[id/2][id]?</label>
				<label kind="assignment">mqual=(mqual&gt;shqual)*shqual+(mqual&lt;=shqual)*mqual,
shqual=0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
				<label kind="guard">info==1</label>
				<label kind="assignment">info=0,mqual=mqual+(mqual&lt;2)</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
				<label kind="guard">info==0</label>
				<label kind="assignment">info=0,mqual=mqual-(mqual&gt;0)</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
				<label kind="guard">info&gt;=2</label>
				<label kind="assignment">info=0,mqual=mqual-(mqual&gt;0)</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
				<label kind="guard">info&lt;2 &amp;&amp; completion!=0</label>
				<label kind="assignment">info=info+completion</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
				<label kind="guard">impersonated!=0 &amp;&amp; impersonated!=id</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
				<label kind="select">_:int[0,0]</label>
				<label kind="assignment">__assume_at_id6_of_completion(_),
completion=1+(data&gt;=1)+(data&gt;=2),
data=0,
__reset_completion()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
				<label kind="guard">data!=2</label>
				<label kind="assignment">data=data+1</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
				<label kind="guard">impersonated!=0 &amp;&amp; impersonated!=id</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.

system AI, Attacker;
</system>
    <queries>
        <query>
            <formula></formula>
            <comment></comment>
        </query>
    </queries>
</nta>